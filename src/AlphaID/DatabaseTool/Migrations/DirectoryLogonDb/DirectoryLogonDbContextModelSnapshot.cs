// <auto-generated />
using AlphaId.DirectoryLogon.EntityFramework;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DatabaseTool.Migrations.DirectoryLogonDb
{
    [DbContext(typeof(DirectoryLogonDbContext))]
    partial class DirectoryLogonDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("IdSubjects.DirectoryLogon.DirectoryAccount", b =>
                {
                    b.Property<string>("ObjectId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.Property<string>("PersonId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("ObjectId", "ServiceId");

                    b.HasIndex("ServiceId");

                    b.ToTable("LogonAccount");
                });

            modelBuilder.Entity("IdSubjects.DirectoryLogon.DirectoryServiceDescriptor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("AutoCreateAccount")
                        .HasColumnType("bit");

                    b.Property<string>("DefaultUserAccountContainer")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Password")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("RootDn")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("SamDomainPart")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("ServerAddress")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("varchar(10)");

                    b.Property<string>("UpnSuffix")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("UserName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("DirectoryService");
                });

            modelBuilder.Entity("IdSubjects.DirectoryLogon.DirectoryAccount", b =>
                {
                    b.HasOne("IdSubjects.DirectoryLogon.DirectoryServiceDescriptor", "DirectoryServiceDescriptor")
                        .WithMany()
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DirectoryServiceDescriptor");
                });

            modelBuilder.Entity("IdSubjects.DirectoryLogon.DirectoryServiceDescriptor", b =>
                {
                    b.OwnsOne("IdSubjects.DirectoryLogon.ExternalLoginProviderInfo", "ExternalLoginProvider", b1 =>
                        {
                            b1.Property<int>("DirectoryServiceDescriptorId")
                                .HasColumnType("int");

                            b1.Property<string>("DisplayName")
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasMaxLength(50)
                                .IsUnicode(false)
                                .HasColumnType("varchar(50)");

                            b1.Property<string>("RegisteredClientId")
                                .IsRequired()
                                .HasMaxLength(50)
                                .IsUnicode(false)
                                .HasColumnType("varchar(50)");

                            b1.Property<string>("SubjectGenerator")
                                .HasMaxLength(255)
                                .IsUnicode(false)
                                .HasColumnType("varchar(255)");

                            b1.HasKey("DirectoryServiceDescriptorId");

                            b1.ToTable("DirectoryService");

                            b1.WithOwner()
                                .HasForeignKey("DirectoryServiceDescriptorId");
                        });

                    b.Navigation("ExternalLoginProvider");
                });
#pragma warning restore 612, 618
        }
    }
}
