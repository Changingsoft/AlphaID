<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Allowed access token signing algorithms" xml:space="preserve">
    <value>可用的 Access token 签名算法</value>
  </data>
  <data name="Client ID" xml:space="preserve">
    <value>客户端ID</value>
  </data>
  <data name="Client name" xml:space="preserve">
    <value>客户端名称</value>
  </data>
  <data name="Confirm password" xml:space="preserve">
    <value>确认密码</value>
  </data>
  <data name="Contact" xml:space="preserve">
    <value>联系信息</value>
  </data>
  <data name="Department" xml:space="preserve">
    <value>部门</value>
  </data>
  <data name="Description" xml:space="preserve">
    <value>描述</value>
  </data>
  <data name="Directory service" xml:space="preserve">
    <value>目录服务</value>
  </data>
  <data name="Display name" xml:space="preserve">
    <value>显示名称</value>
  </data>
  <data name="Domicile" xml:space="preserve">
    <value>住所</value>
  </data>
  <data name="Email" xml:space="preserve">
    <value>电子邮件</value>
  </data>
  <data name="Enabled" xml:space="preserve">
    <value>启用的</value>
  </data>
  <data name="Expires" xml:space="preserve">
    <value>过期时间</value>
  </data>
  <data name="Female" xml:space="preserve">
    <value>女</value>
  </data>
  <data name="Front Channel Logout URI" xml:space="preserve">
    <value>前端通道注销URI</value>
  </data>
  <data name="Gender" xml:space="preserve">
    <value>性别</value>
  </data>
  <data name="Given name" xml:space="preserve">
    <value>名字</value>
  </data>
  <data name="Key" xml:space="preserve">
    <value>键</value>
  </data>
  <data name="Male" xml:space="preserve">
    <value>男</value>
  </data>
  <data name="Mobile phone number" xml:space="preserve">
    <value>移动电话号码</value>
  </data>
  <data name="Name" xml:space="preserve">
    <value>名称</value>
  </data>
  <data name="New claim type" xml:space="preserve">
    <value>新声明类型</value>
  </data>
  <data name="New password" xml:space="preserve">
    <value>新密码</value>
  </data>
  <data name="Password" xml:space="preserve">
    <value>密码</value>
  </data>
  <data name="Phonetic given name" xml:space="preserve">
    <value>名字读音</value>
  </data>
  <data name="Phonetic surname" xml:space="preserve">
    <value>姓氏读音</value>
  </data>
  <data name="Remark" xml:space="preserve">
    <value>备注</value>
  </data>
  <data name="Require resource indicator" xml:space="preserve">
    <value>需要资源指示器</value>
  </data>
  <data name="Resource name" xml:space="preserve">
    <value>资源名称</value>
  </data>
  <data name="Root DN" xml:space="preserve">
    <value>根DN</value>
  </data>
  <data name="Secret" xml:space="preserve">
    <value>秘密</value>
  </data>
  <data name="Server" xml:space="preserve">
    <value>服务器</value>
  </data>
  <data name="Show in discovery document" xml:space="preserve">
    <value>在发现文档中显示</value>
  </data>
  <data name="Specifies logout URI at client for HTTP based front-channel logout." xml:space="preserve">
    <value>指定客户端用于HTTP前端通道的注销URI。</value>
  </data>
  <data name="Surname" xml:space="preserve">
    <value>姓氏</value>
  </data>
  <data name="Title" xml:space="preserve">
    <value>职务</value>
  </data>
  <data name="Type" xml:space="preserve">
    <value>类型</value>
  </data>
  <data name="Unified social credit code" xml:space="preserve">
    <value>统一社会信用代码</value>
  </data>
  <data name="UPN suffix" xml:space="preserve">
    <value>UPN后缀</value>
  </data>
  <data name="User DN" xml:space="preserve">
    <value>用户DN</value>
  </data>
  <data name="User must change password on next login" xml:space="preserve">
    <value>用户下次登录必须修改密码</value>
  </data>
  <data name="User name" xml:space="preserve">
    <value>用户名称</value>
  </data>
  <data name="Validate_EmailAddress" xml:space="preserve">
    <value>不是有效的电子邮件格式。</value>
  </data>
  <data name="Validate_PasswordConfirm" xml:space="preserve">
    <value>两次输入的密码不一致。</value>
  </data>
  <data name="Validate_Required" xml:space="preserve">
    <value>{0}是必需的。</value>
  </data>
  <data name="Validate_StringLength" xml:space="preserve">
    <value>{0}的长度介于{2}到{1}个字符。</value>
  </data>
  <data name="Value" xml:space="preserve">
    <value>值</value>
  </data>
  <data name="Verification code" xml:space="preserve">
    <value>短信验证码</value>
  </data>
</root>